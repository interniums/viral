/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/cron/update-database/route";
exports.ids = ["app/api/cron/update-database/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "?32c4":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcron%2Fupdate-database%2Froute&page=%2Fapi%2Fcron%2Fupdate-database%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcron%2Fupdate-database%2Froute.ts&appDir=C%3A%5CUsers%5CWhite_Prince%5CDesktop%5Cviral%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CWhite_Prince%5CDesktop%5Cviral&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcron%2Fupdate-database%2Froute&page=%2Fapi%2Fcron%2Fupdate-database%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcron%2Fupdate-database%2Froute.ts&appDir=C%3A%5CUsers%5CWhite_Prince%5CDesktop%5Cviral%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CWhite_Prince%5CDesktop%5Cviral&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var C_Users_White_Prince_Desktop_viral_app_api_cron_update_database_route_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/api/cron/update-database/route.ts */ \"(rsc)/./app/api/cron/update-database/route.ts\");\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/cron/update-database/route\",\n        pathname: \"/api/cron/update-database\",\n        filename: \"route\",\n        bundlePath: \"app/api/cron/update-database/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\White_Prince\\\\Desktop\\\\viral\\\\app\\\\api\\\\cron\\\\update-database\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_White_Prince_Desktop_viral_app_api_cron_update_database_route_ts__WEBPACK_IMPORTED_MODULE_2__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/cron/update-database/route\";\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjcm9uJTJGdXBkYXRlLWRhdGFiYXNlJTJGcm91dGUmcGFnZT0lMkZhcGklMkZjcm9uJTJGdXBkYXRlLWRhdGFiYXNlJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY3JvbiUyRnVwZGF0ZS1kYXRhYmFzZSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNXaGl0ZV9QcmluY2UlNUNEZXNrdG9wJTVDdmlyYWwlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q1doaXRlX1ByaW5jZSU1Q0Rlc2t0b3AlNUN2aXJhbCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDZ0Q7QUFDL0c7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1R0FBdUc7QUFDL0c7QUFDaUo7O0FBRWpKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmlyYWwtdHJlbmRpbmctZnJvbnRlbmQvPzE1YTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcV2hpdGVfUHJpbmNlXFxcXERlc2t0b3BcXFxcdmlyYWxcXFxcYXBwXFxcXGFwaVxcXFxjcm9uXFxcXHVwZGF0ZS1kYXRhYmFzZVxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvY3Jvbi91cGRhdGUtZGF0YWJhc2Uvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jcm9uL3VwZGF0ZS1kYXRhYmFzZVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvY3Jvbi91cGRhdGUtZGF0YWJhc2Uvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxXaGl0ZV9QcmluY2VcXFxcRGVza3RvcFxcXFx2aXJhbFxcXFxhcHBcXFxcYXBpXFxcXGNyb25cXFxcdXBkYXRlLWRhdGFiYXNlXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2Nyb24vdXBkYXRlLWRhdGFiYXNlL3JvdXRlXCI7XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcron%2Fupdate-database%2Froute&page=%2Fapi%2Fcron%2Fupdate-database%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcron%2Fupdate-database%2Froute.ts&appDir=C%3A%5CUsers%5CWhite_Prince%5CDesktop%5Cviral%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CWhite_Prince%5CDesktop%5Cviral&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/cron/update-database/route.ts":
/*!***********************************************!*\
  !*** ./app/api/cron/update-database/route.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _lib_services_dataFetcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../lib/services/dataFetcher */ \"(rsc)/./lib/services/dataFetcher.ts\");\n\n\n// This endpoint is called by GitHub Actions cron job\n// Runs every 15 minutes via GitHub Actions workflow\nasync function GET(request) {\n    try {\n        // Debug logging\n        console.log(\"\\uD83D\\uDD0D Debug: Cron endpoint called\");\n        console.log(\"\\uD83D\\uDD0D Debug: process.env.CRON_SECRET =\", process.env.CRON_SECRET);\n        // Verify the request is from GitHub Actions\n        const authHeader = request.headers.get(\"authorization\");\n        const expectedSecret = process.env.CRON_SECRET || \"f53c3c0208ca022e360f2622dc5a9a3049275841a92324b9bf4eda05008bcbd5\";\n        console.log(\"\\uD83D\\uDD0D Debug: authHeader =\", authHeader);\n        console.log(\"\\uD83D\\uDD0D Debug: expectedSecret =\", expectedSecret);\n        console.log(\"\\uD83D\\uDD0D Debug: authHeader === `Bearer ${expectedSecret}` =\", authHeader === `Bearer ${expectedSecret}`);\n        if (authHeader !== `Bearer ${expectedSecret}`) {\n            console.log(\"❌ Debug: Authorization failed\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Unauthorized\",\n                message: \"Invalid or missing CRON_SECRET\"\n            }, {\n                status: 401\n            });\n        }\n        console.log(\"⏰ GitHub Actions cron job triggered - updating database...\");\n        // Run the database update\n        await _lib_services_dataFetcher__WEBPACK_IMPORTED_MODULE_1__.dataFetcherService.updateDatabaseWithFreshData();\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            message: \"Cron endpoint is working - database updated successfully\",\n            timestamp: new Date().toISOString(),\n            source: \"github-actions\"\n        });\n    } catch (error) {\n        console.error(\"❌ GitHub Actions cron job failed:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Cron endpoint failed\",\n            source: \"github-actions\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2Nyb24vdXBkYXRlLWRhdGFiYXNlL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwQztBQUMrQjtBQUV6RSxxREFBcUQ7QUFDckQsb0RBQW9EO0FBQzdDLGVBQWVFLElBQUlDLE9BQWdCO0lBQ3hDLElBQUk7UUFDRixnQkFBZ0I7UUFDaEJDLFFBQVFDLEdBQUcsQ0FBQztRQUNaRCxRQUFRQyxHQUFHLENBQUMsaURBQXVDQyxRQUFRQyxHQUFHLENBQUNDLFdBQVc7UUFFMUUsNENBQTRDO1FBQzVDLE1BQU1DLGFBQWFOLFFBQVFPLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDO1FBQ3ZDLE1BQU1DLGlCQUFpQk4sUUFBUUMsR0FBRyxDQUFDQyxXQUFXLElBQUk7UUFFbERKLFFBQVFDLEdBQUcsQ0FBQyxvQ0FBMEJJO1FBQ3RDTCxRQUFRQyxHQUFHLENBQUMsd0NBQThCTztRQUMxQ1IsUUFBUUMsR0FBRyxDQUFDLG1FQUF5REksZUFBZSxDQUFDLE9BQU8sRUFBRUcsZUFBZSxDQUFDO1FBRTlHLElBQUlILGVBQWUsQ0FBQyxPQUFPLEVBQUVHLGVBQWUsQ0FBQyxFQUFFO1lBQzdDUixRQUFRQyxHQUFHLENBQUM7WUFDWixPQUFPTCxrRkFBWUEsQ0FBQ2EsSUFBSSxDQUN0QjtnQkFDRUMsT0FBTztnQkFDUEMsU0FBUztZQUNYLEdBQ0E7Z0JBQUVDLFFBQVE7WUFBSTtRQUVsQjtRQUVBWixRQUFRQyxHQUFHLENBQUM7UUFFWiwwQkFBMEI7UUFDMUIsTUFBTUoseUVBQWtCQSxDQUFDZ0IsMkJBQTJCO1FBRXBELE9BQU9qQixrRkFBWUEsQ0FBQ2EsSUFBSSxDQUFDO1lBQ3ZCSyxTQUFTO1lBQ1RILFNBQVM7WUFDVEksV0FBVyxJQUFJQyxPQUFPQyxXQUFXO1lBQ2pDQyxRQUFRO1FBQ1Y7SUFDRixFQUFFLE9BQU9SLE9BQU87UUFDZFYsUUFBUVUsS0FBSyxDQUFDLHFDQUFxQ0E7UUFDbkQsT0FBT2Qsa0ZBQVlBLENBQUNhLElBQUksQ0FDdEI7WUFDRUssU0FBUztZQUNUSixPQUFPO1lBQ1BRLFFBQVE7UUFDVixHQUNBO1lBQUVOLFFBQVE7UUFBSTtJQUVsQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmlyYWwtdHJlbmRpbmctZnJvbnRlbmQvLi9hcHAvYXBpL2Nyb24vdXBkYXRlLWRhdGFiYXNlL3JvdXRlLnRzPzg2ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInXHJcbmltcG9ydCB7IGRhdGFGZXRjaGVyU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL2xpYi9zZXJ2aWNlcy9kYXRhRmV0Y2hlcidcclxuXHJcbi8vIFRoaXMgZW5kcG9pbnQgaXMgY2FsbGVkIGJ5IEdpdEh1YiBBY3Rpb25zIGNyb24gam9iXHJcbi8vIFJ1bnMgZXZlcnkgMTUgbWludXRlcyB2aWEgR2l0SHViIEFjdGlvbnMgd29ya2Zsb3dcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBSZXF1ZXN0KSB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIERlYnVnIGxvZ2dpbmdcclxuICAgIGNvbnNvbGUubG9nKCfwn5SNIERlYnVnOiBDcm9uIGVuZHBvaW50IGNhbGxlZCcpXHJcbiAgICBjb25zb2xlLmxvZygn8J+UjSBEZWJ1ZzogcHJvY2Vzcy5lbnYuQ1JPTl9TRUNSRVQgPScsIHByb2Nlc3MuZW52LkNST05fU0VDUkVUKVxyXG5cclxuICAgIC8vIFZlcmlmeSB0aGUgcmVxdWVzdCBpcyBmcm9tIEdpdEh1YiBBY3Rpb25zXHJcbiAgICBjb25zdCBhdXRoSGVhZGVyID0gcmVxdWVzdC5oZWFkZXJzLmdldCgnYXV0aG9yaXphdGlvbicpXHJcbiAgICBjb25zdCBleHBlY3RlZFNlY3JldCA9IHByb2Nlc3MuZW52LkNST05fU0VDUkVUIHx8ICdmNTNjM2MwMjA4Y2EwMjJlMzYwZjI2MjJkYzVhOWEzMDQ5Mjc1ODQxYTkyMzI0YjliZjRlZGEwNTAwOGJjYmQ1J1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCfwn5SNIERlYnVnOiBhdXRoSGVhZGVyID0nLCBhdXRoSGVhZGVyKVxyXG4gICAgY29uc29sZS5sb2coJ/CflI0gRGVidWc6IGV4cGVjdGVkU2VjcmV0ID0nLCBleHBlY3RlZFNlY3JldClcclxuICAgIGNvbnNvbGUubG9nKCfwn5SNIERlYnVnOiBhdXRoSGVhZGVyID09PSBgQmVhcmVyICR7ZXhwZWN0ZWRTZWNyZXR9YCA9JywgYXV0aEhlYWRlciA9PT0gYEJlYXJlciAke2V4cGVjdGVkU2VjcmV0fWApXHJcblxyXG4gICAgaWYgKGF1dGhIZWFkZXIgIT09IGBCZWFyZXIgJHtleHBlY3RlZFNlY3JldH1gKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCfinYwgRGVidWc6IEF1dGhvcml6YXRpb24gZmFpbGVkJylcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGVycm9yOiAnVW5hdXRob3JpemVkJyxcclxuICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIG9yIG1pc3NpbmcgQ1JPTl9TRUNSRVQnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDQwMSB9XHJcbiAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZygn4o+wIEdpdEh1YiBBY3Rpb25zIGNyb24gam9iIHRyaWdnZXJlZCAtIHVwZGF0aW5nIGRhdGFiYXNlLi4uJylcclxuXHJcbiAgICAvLyBSdW4gdGhlIGRhdGFiYXNlIHVwZGF0ZVxyXG4gICAgYXdhaXQgZGF0YUZldGNoZXJTZXJ2aWNlLnVwZGF0ZURhdGFiYXNlV2l0aEZyZXNoRGF0YSgpXHJcblxyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcclxuICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgbWVzc2FnZTogJ0Nyb24gZW5kcG9pbnQgaXMgd29ya2luZyAtIGRhdGFiYXNlIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5JyxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIHNvdXJjZTogJ2dpdGh1Yi1hY3Rpb25zJyxcclxuICAgIH0pXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBHaXRIdWIgQWN0aW9ucyBjcm9uIGpvYiBmYWlsZWQ6JywgZXJyb3IpXHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgIHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBlcnJvcjogJ0Nyb24gZW5kcG9pbnQgZmFpbGVkJyxcclxuICAgICAgICBzb3VyY2U6ICdnaXRodWItYWN0aW9ucycsXHJcbiAgICAgIH0sXHJcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxyXG4gICAgKVxyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiZGF0YUZldGNoZXJTZXJ2aWNlIiwiR0VUIiwicmVxdWVzdCIsImNvbnNvbGUiLCJsb2ciLCJwcm9jZXNzIiwiZW52IiwiQ1JPTl9TRUNSRVQiLCJhdXRoSGVhZGVyIiwiaGVhZGVycyIsImdldCIsImV4cGVjdGVkU2VjcmV0IiwianNvbiIsImVycm9yIiwibWVzc2FnZSIsInN0YXR1cyIsInVwZGF0ZURhdGFiYXNlV2l0aEZyZXNoRGF0YSIsInN1Y2Nlc3MiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzb3VyY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/cron/update-database/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/cache.ts":
/*!**********************!*\
  !*** ./lib/cache.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CACHE_KEYS: () => (/* binding */ CACHE_KEYS),\n/* harmony export */   CacheManager: () => (/* binding */ CacheManager),\n/* harmony export */   cacheManager: () => (/* binding */ cacheManager)\n/* harmony export */ });\nclass CacheManager {\n    constructor(cacheDurationSeconds = 900){\n        this.cacheDuration = cacheDurationSeconds;\n        this.memoryCache = new Map();\n        console.log(`✅ Using in-memory cache (${cacheDurationSeconds / 60} minute TTL)`);\n    }\n    getCachedData(key) {\n        const entry = this.memoryCache.get(key);\n        if (entry) {\n            const elapsed = Date.now() - entry.timestamp;\n            if (elapsed < this.cacheDuration * 1000) {\n                return entry.data;\n            }\n        }\n        return null;\n    }\n    setCachedData(key, data) {\n        this.memoryCache.set(key, {\n            data,\n            timestamp: Date.now()\n        });\n    }\n    isCacheValid(key) {\n        return this.getCachedData(key) !== null;\n    }\n    getCacheInfo(key) {\n        const entry = this.memoryCache.get(key);\n        if (entry) {\n            const elapsed = Date.now() - entry.timestamp;\n            const remaining = Math.max(0, this.cacheDuration * 1000 - elapsed);\n            return {\n                exists: remaining > 0,\n                ttl_seconds: Math.floor(remaining / 1000),\n                ttl_minutes: Math.floor(remaining / 60000)\n            };\n        }\n        return {\n            exists: false,\n            ttl_seconds: 0,\n            ttl_minutes: 0\n        };\n    }\n    clearCache(key) {\n        if (key) {\n            this.memoryCache.delete(key);\n        } else {\n            this.memoryCache.clear();\n            console.log(\"\\uD83D\\uDDD1️ All cache cleared\");\n        }\n    }\n}\n// Global cache manager instance\nconst cacheManager = new CacheManager();\n// Cache keys\nconst CACHE_KEYS = {\n    trending_topics: \"viral:trending:topics\",\n    all_trending_topics: \"viral:trending:all_topics\",\n    reddit_topics: \"viral:trending:reddit\",\n    google_trends_topics: \"viral:trending:google_trends\",\n    youtube_topics: \"viral:trending:youtube\",\n    stats: \"viral:stats:overview\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvY2FjaGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBV08sTUFBTUE7SUFJWEMsWUFBWUMsdUJBQXVCLEdBQUcsQ0FBRTtRQUN0QyxJQUFJLENBQUNDLGFBQWEsR0FBR0Q7UUFDckIsSUFBSSxDQUFDRSxXQUFXLEdBQUcsSUFBSUM7UUFDdkJDLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLHlCQUF5QixFQUFFTCx1QkFBdUIsR0FBRyxZQUFZLENBQUM7SUFDakY7SUFFQU0sY0FBaUJDLEdBQVcsRUFBWTtRQUN0QyxNQUFNQyxRQUFRLElBQUksQ0FBQ04sV0FBVyxDQUFDTyxHQUFHLENBQUNGO1FBQ25DLElBQUlDLE9BQU87WUFDVCxNQUFNRSxVQUFVQyxLQUFLQyxHQUFHLEtBQUtKLE1BQU1LLFNBQVM7WUFDNUMsSUFBSUgsVUFBVSxJQUFJLENBQUNULGFBQWEsR0FBRyxNQUFNO2dCQUN2QyxPQUFPTyxNQUFNTSxJQUFJO1lBQ25CO1FBQ0Y7UUFDQSxPQUFPO0lBQ1Q7SUFFQUMsY0FBaUJSLEdBQVcsRUFBRU8sSUFBTyxFQUFRO1FBQzNDLElBQUksQ0FBQ1osV0FBVyxDQUFDYyxHQUFHLENBQUNULEtBQUs7WUFDeEJPO1lBQ0FELFdBQVdGLEtBQUtDLEdBQUc7UUFDckI7SUFDRjtJQUVBSyxhQUFhVixHQUFXLEVBQVc7UUFDakMsT0FBTyxJQUFJLENBQUNELGFBQWEsQ0FBQ0MsU0FBUztJQUNyQztJQUVBVyxhQUFhWCxHQUFXLEVBQWE7UUFDbkMsTUFBTUMsUUFBUSxJQUFJLENBQUNOLFdBQVcsQ0FBQ08sR0FBRyxDQUFDRjtRQUNuQyxJQUFJQyxPQUFPO1lBQ1QsTUFBTUUsVUFBVUMsS0FBS0MsR0FBRyxLQUFLSixNQUFNSyxTQUFTO1lBQzVDLE1BQU1NLFlBQVlDLEtBQUtDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQ3BCLGFBQWEsR0FBRyxPQUFPUztZQUMxRCxPQUFPO2dCQUNMWSxRQUFRSCxZQUFZO2dCQUNwQkksYUFBYUgsS0FBS0ksS0FBSyxDQUFDTCxZQUFZO2dCQUNwQ00sYUFBYUwsS0FBS0ksS0FBSyxDQUFDTCxZQUFZO1lBQ3RDO1FBQ0Y7UUFDQSxPQUFPO1lBQUVHLFFBQVE7WUFBT0MsYUFBYTtZQUFHRSxhQUFhO1FBQUU7SUFDekQ7SUFFQUMsV0FBV25CLEdBQVksRUFBUTtRQUM3QixJQUFJQSxLQUFLO1lBQ1AsSUFBSSxDQUFDTCxXQUFXLENBQUN5QixNQUFNLENBQUNwQjtRQUMxQixPQUFPO1lBQ0wsSUFBSSxDQUFDTCxXQUFXLENBQUMwQixLQUFLO1lBQ3RCeEIsUUFBUUMsR0FBRyxDQUFDO1FBQ2Q7SUFDRjtBQUNGO0FBRUEsZ0NBQWdDO0FBQ3pCLE1BQU13QixlQUFlLElBQUkvQixlQUFjO0FBRTlDLGFBQWE7QUFDTixNQUFNZ0MsYUFBYTtJQUN4QkMsaUJBQWlCO0lBQ2pCQyxxQkFBcUI7SUFDckJDLGVBQWU7SUFDZkMsc0JBQXNCO0lBQ3RCQyxnQkFBZ0I7SUFDaEJDLE9BQU87QUFDVCxFQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmlyYWwtdHJlbmRpbmctZnJvbnRlbmQvLi9saWIvY2FjaGUudHM/N2NiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgQ2FjaGVFbnRyeTxUPiB7XHJcbiAgZGF0YTogVFxyXG4gIHRpbWVzdGFtcDogbnVtYmVyXHJcbn1cclxuXHJcbmludGVyZmFjZSBDYWNoZUluZm8ge1xyXG4gIGV4aXN0czogYm9vbGVhblxyXG4gIHR0bF9zZWNvbmRzOiBudW1iZXJcclxuICB0dGxfbWludXRlczogbnVtYmVyXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDYWNoZU1hbmFnZXIge1xyXG4gIHByaXZhdGUgY2FjaGVEdXJhdGlvbjogbnVtYmVyXHJcbiAgcHJpdmF0ZSBtZW1vcnlDYWNoZTogTWFwPHN0cmluZywgQ2FjaGVFbnRyeTxhbnk+PlxyXG5cclxuICBjb25zdHJ1Y3RvcihjYWNoZUR1cmF0aW9uU2Vjb25kcyA9IDkwMCkge1xyXG4gICAgdGhpcy5jYWNoZUR1cmF0aW9uID0gY2FjaGVEdXJhdGlvblNlY29uZHNcclxuICAgIHRoaXMubWVtb3J5Q2FjaGUgPSBuZXcgTWFwKClcclxuICAgIGNvbnNvbGUubG9nKGDinIUgVXNpbmcgaW4tbWVtb3J5IGNhY2hlICgke2NhY2hlRHVyYXRpb25TZWNvbmRzIC8gNjB9IG1pbnV0ZSBUVEwpYClcclxuICB9XHJcblxyXG4gIGdldENhY2hlZERhdGE8VD4oa2V5OiBzdHJpbmcpOiBUIHwgbnVsbCB7XHJcbiAgICBjb25zdCBlbnRyeSA9IHRoaXMubWVtb3J5Q2FjaGUuZ2V0KGtleSlcclxuICAgIGlmIChlbnRyeSkge1xyXG4gICAgICBjb25zdCBlbGFwc2VkID0gRGF0ZS5ub3coKSAtIGVudHJ5LnRpbWVzdGFtcFxyXG4gICAgICBpZiAoZWxhcHNlZCA8IHRoaXMuY2FjaGVEdXJhdGlvbiAqIDEwMDApIHtcclxuICAgICAgICByZXR1cm4gZW50cnkuZGF0YVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxuXHJcbiAgc2V0Q2FjaGVkRGF0YTxUPihrZXk6IHN0cmluZywgZGF0YTogVCk6IHZvaWQge1xyXG4gICAgdGhpcy5tZW1vcnlDYWNoZS5zZXQoa2V5LCB7XHJcbiAgICAgIGRhdGEsXHJcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBpc0NhY2hlVmFsaWQoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmdldENhY2hlZERhdGEoa2V5KSAhPT0gbnVsbFxyXG4gIH1cclxuXHJcbiAgZ2V0Q2FjaGVJbmZvKGtleTogc3RyaW5nKTogQ2FjaGVJbmZvIHtcclxuICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5tZW1vcnlDYWNoZS5nZXQoa2V5KVxyXG4gICAgaWYgKGVudHJ5KSB7XHJcbiAgICAgIGNvbnN0IGVsYXBzZWQgPSBEYXRlLm5vdygpIC0gZW50cnkudGltZXN0YW1wXHJcbiAgICAgIGNvbnN0IHJlbWFpbmluZyA9IE1hdGgubWF4KDAsIHRoaXMuY2FjaGVEdXJhdGlvbiAqIDEwMDAgLSBlbGFwc2VkKVxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGV4aXN0czogcmVtYWluaW5nID4gMCxcclxuICAgICAgICB0dGxfc2Vjb25kczogTWF0aC5mbG9vcihyZW1haW5pbmcgLyAxMDAwKSxcclxuICAgICAgICB0dGxfbWludXRlczogTWF0aC5mbG9vcihyZW1haW5pbmcgLyA2MDAwMCksXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB7IGV4aXN0czogZmFsc2UsIHR0bF9zZWNvbmRzOiAwLCB0dGxfbWludXRlczogMCB9XHJcbiAgfVxyXG5cclxuICBjbGVhckNhY2hlKGtleT86IHN0cmluZyk6IHZvaWQge1xyXG4gICAgaWYgKGtleSkge1xyXG4gICAgICB0aGlzLm1lbW9yeUNhY2hlLmRlbGV0ZShrZXkpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm1lbW9yeUNhY2hlLmNsZWFyKClcclxuICAgICAgY29uc29sZS5sb2coJ/Cfl5HvuI8gQWxsIGNhY2hlIGNsZWFyZWQnKVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy8gR2xvYmFsIGNhY2hlIG1hbmFnZXIgaW5zdGFuY2VcclxuZXhwb3J0IGNvbnN0IGNhY2hlTWFuYWdlciA9IG5ldyBDYWNoZU1hbmFnZXIoKVxyXG5cclxuLy8gQ2FjaGUga2V5c1xyXG5leHBvcnQgY29uc3QgQ0FDSEVfS0VZUyA9IHtcclxuICB0cmVuZGluZ190b3BpY3M6ICd2aXJhbDp0cmVuZGluZzp0b3BpY3MnLFxyXG4gIGFsbF90cmVuZGluZ190b3BpY3M6ICd2aXJhbDp0cmVuZGluZzphbGxfdG9waWNzJyxcclxuICByZWRkaXRfdG9waWNzOiAndmlyYWw6dHJlbmRpbmc6cmVkZGl0JyxcclxuICBnb29nbGVfdHJlbmRzX3RvcGljczogJ3ZpcmFsOnRyZW5kaW5nOmdvb2dsZV90cmVuZHMnLFxyXG4gIHlvdXR1YmVfdG9waWNzOiAndmlyYWw6dHJlbmRpbmc6eW91dHViZScsXHJcbiAgc3RhdHM6ICd2aXJhbDpzdGF0czpvdmVydmlldycsXHJcbn0gYXMgY29uc3RcclxuIl0sIm5hbWVzIjpbIkNhY2hlTWFuYWdlciIsImNvbnN0cnVjdG9yIiwiY2FjaGVEdXJhdGlvblNlY29uZHMiLCJjYWNoZUR1cmF0aW9uIiwibWVtb3J5Q2FjaGUiLCJNYXAiLCJjb25zb2xlIiwibG9nIiwiZ2V0Q2FjaGVkRGF0YSIsImtleSIsImVudHJ5IiwiZ2V0IiwiZWxhcHNlZCIsIkRhdGUiLCJub3ciLCJ0aW1lc3RhbXAiLCJkYXRhIiwic2V0Q2FjaGVkRGF0YSIsInNldCIsImlzQ2FjaGVWYWxpZCIsImdldENhY2hlSW5mbyIsInJlbWFpbmluZyIsIk1hdGgiLCJtYXgiLCJleGlzdHMiLCJ0dGxfc2Vjb25kcyIsImZsb29yIiwidHRsX21pbnV0ZXMiLCJjbGVhckNhY2hlIiwiZGVsZXRlIiwiY2xlYXIiLCJjYWNoZU1hbmFnZXIiLCJDQUNIRV9LRVlTIiwidHJlbmRpbmdfdG9waWNzIiwiYWxsX3RyZW5kaW5nX3RvcGljcyIsInJlZGRpdF90b3BpY3MiLCJnb29nbGVfdHJlbmRzX3RvcGljcyIsInlvdXR1YmVfdG9waWNzIiwic3RhdHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/cache.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/dataFetcher.ts":
/*!*************************************!*\
  !*** ./lib/services/dataFetcher.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataFetcherService: () => (/* binding */ DataFetcherService),\n/* harmony export */   dataFetcherService: () => (/* binding */ dataFetcherService)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../supabase */ \"(rsc)/./lib/supabase.ts\");\n/* harmony import */ var _reddit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reddit */ \"(rsc)/./lib/services/reddit.ts\");\n/* harmony import */ var _youtube__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./youtube */ \"(rsc)/./lib/services/youtube.ts\");\n/* harmony import */ var _googleTrends__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./googleTrends */ \"(rsc)/./lib/services/googleTrends.ts\");\n/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../cache */ \"(rsc)/./lib/cache.ts\");\n\n\n\n\n\nconst DATABASE_RETENTION_DAYS = 7;\nconst MAX_TOPICS_PER_PLATFORM = 200;\nconst MAX_TOTAL_TOPICS = 500;\nclass DataFetcherService {\n    async updateDatabaseWithFreshData() {\n        console.log(\"\\uD83D\\uDD04 Starting scheduled database update...\");\n        try {\n            const freshData = [];\n            // 1. Fetch fresh Reddit data\n            console.log(\"\\uD83D\\uDD34 Fetching fresh Reddit data...\");\n            try {\n                const redditTopics = await _reddit__WEBPACK_IMPORTED_MODULE_1__.redditService.fetchTrendingTopics();\n                const redditData = redditTopics.slice(0, 50).map((topic)=>({\n                        platform: topic.platform,\n                        title: topic.title,\n                        description: topic.description,\n                        url: topic.url,\n                        score: topic.score,\n                        engagement: topic.engagement,\n                        category: topic.category,\n                        topic: topic.topic,\n                        tags: topic.tags,\n                        author: topic.author,\n                        timestamp: new Date(topic.timestamp).toISOString()\n                    }));\n                freshData.push(...redditData);\n                console.log(`🔴 Fetched ${redditData.length} fresh Reddit posts`);\n            } catch (error) {\n                console.error(\"❌ Reddit API failed in background task:\", error);\n            }\n            // 2. Fetch fresh Google Trends data\n            console.log(\"\\uD83D\\uDD25 Fetching fresh Google Trends data...\");\n            try {\n                const googleTrendsData = await _googleTrends__WEBPACK_IMPORTED_MODULE_3__.googleTrendsService.fetchTrendingTopics();\n                const trendsData = googleTrendsData.map((topic)=>({\n                        platform: topic.platform,\n                        title: topic.title,\n                        description: topic.description,\n                        url: topic.url,\n                        score: topic.score,\n                        engagement: topic.engagement,\n                        category: topic.category,\n                        topic: topic.topic,\n                        tags: topic.tags,\n                        author: topic.author,\n                        timestamp: new Date(topic.timestamp).toISOString()\n                    }));\n                freshData.push(...trendsData);\n                console.log(`🔥 Fetched ${trendsData.length} fresh Google Trends topics`);\n            } catch (error) {\n                console.error(\"❌ Google Trends API failed in background task:\", error);\n            }\n            // 3. Fetch fresh YouTube data\n            console.log(\"\\uD83D\\uDCFA Fetching fresh YouTube data...\");\n            try {\n                const youtubeTopics = await _youtube__WEBPACK_IMPORTED_MODULE_2__.youtubeService.fetchTrendingTopics();\n                const youtubeData = youtubeTopics.slice(0, 20).map((topic)=>({\n                        platform: topic.platform,\n                        title: topic.title,\n                        description: topic.description,\n                        url: topic.url,\n                        score: topic.score,\n                        engagement: topic.engagement,\n                        category: topic.category,\n                        topic: topic.topic,\n                        tags: topic.tags,\n                        author: topic.author,\n                        timestamp: new Date(topic.timestamp).toISOString()\n                    }));\n                freshData.push(...youtubeData);\n                console.log(`📺 Fetched ${youtubeData.length} fresh YouTube videos`);\n            } catch (error) {\n                console.error(\"❌ YouTube API failed in background task:\", error);\n            }\n            // 4. Update database with fresh data\n            if (freshData.length > 0) {\n                console.log(`💾 Updating database with ${freshData.length} fresh items...`);\n                // Remove old data (older than DATABASE_RETENTION_DAYS days)\n                const weekAgo = new Date();\n                weekAgo.setDate(weekAgo.getDate() - DATABASE_RETENTION_DAYS);\n                // Delete old data\n                const { error: deleteError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"trending_topics\").delete().lt(\"timestamp\", weekAgo.toISOString());\n                if (deleteError) {\n                    console.error(\"Error deleting old data:\", deleteError);\n                }\n                // Insert fresh data\n                const { error: insertError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"trending_topics\").insert(freshData);\n                if (insertError) {\n                    console.error(\"Error inserting fresh data:\", insertError);\n                } else {\n                    console.log(`✅ Database updated successfully with ${freshData.length} fresh items`);\n                }\n                // Clear cache to force fresh data on next request\n                _cache__WEBPACK_IMPORTED_MODULE_4__.cacheManager.clearCache();\n                console.log(\"\\uD83E\\uDDF9 Cache cleared for fresh data\");\n            } else {\n                console.log(\"⚠️ No fresh data fetched - keeping existing database\");\n            }\n        } catch (error) {\n            console.error(\"❌ Background update failed:\", error);\n        }\n    }\n    async fetchTrendingTopics(sortBy = \"random\", sortOrder = \"desc\") {\n        try {\n            // Check cache first\n            const cachedData = _cache__WEBPACK_IMPORTED_MODULE_4__.cacheManager.getCachedData(_cache__WEBPACK_IMPORTED_MODULE_4__.CACHE_KEYS.trending_topics);\n            if (cachedData) {\n                console.log(`📦 Serving ${cachedData.topics.length} topics from cache`);\n                // Apply sorting to cached data\n                const topics = [\n                    ...cachedData.topics\n                ];\n                if (sortBy === \"engagement\") {\n                    topics.sort((a, b)=>sortOrder === \"desc\" ? (b.engagement || 0) - (a.engagement || 0) : (a.engagement || 0) - (b.engagement || 0));\n                } else if (sortBy === \"date\") {\n                    topics.sort((a, b)=>sortOrder === \"desc\" ? new Date(b.timestamp || \"\").getTime() - new Date(a.timestamp || \"\").getTime() : new Date(a.timestamp || \"\").getTime() - new Date(b.timestamp || \"\").getTime());\n                }\n                // If sortBy is 'random', keep the random order from cache\n                return topics;\n            }\n            // If no cache, fetch from database\n            const weekAgo = new Date();\n            weekAgo.setDate(weekAgo.getDate() - DATABASE_RETENTION_DAYS);\n            let query = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"trending_topics\").select(\"*\").gte(\"timestamp\", weekAgo.toISOString()).limit(MAX_TOTAL_TOPICS);\n            // Apply sorting\n            if (sortBy === \"engagement\") {\n                query = query.order(\"engagement\", {\n                    ascending: sortOrder === \"asc\"\n                });\n            } else if (sortBy === \"date\") {\n                query = query.order(\"timestamp\", {\n                    ascending: sortOrder === \"asc\"\n                });\n            } else {\n                // Random order - we'll shuffle in memory\n                query = query.order(\"timestamp\", {\n                    ascending: false\n                });\n            }\n            const { data: results, error } = await query;\n            if (error) {\n                console.error(\"Error fetching from Supabase:\", error);\n                return [];\n            }\n            // Convert to the expected format\n            const topics = (results || []).map((row)=>({\n                    id: row.id,\n                    platform: row.platform,\n                    title: row.title,\n                    description: row.description || \"\",\n                    url: row.url || \"\",\n                    score: row.score || 0,\n                    engagement: row.engagement || 0,\n                    category: row.category || \"\",\n                    tags: row.tags || [],\n                    timestamp: row.timestamp || new Date().toISOString(),\n                    topic: row.topic || \"general\",\n                    author: row.author || \"Unknown\",\n                    created_at: row.created_at\n                }));\n            // Shuffle if random order requested\n            if (sortBy === \"random\") {\n                for(let i = topics.length - 1; i > 0; i--){\n                    const j = Math.floor(Math.random() * (i + 1));\n                    [topics[i], topics[j]] = [\n                        topics[j],\n                        topics[i]\n                    ];\n                }\n            }\n            // Cache the results\n            const cacheData = {\n                topics: topics.slice(0, MAX_TOTAL_TOPICS),\n                timestamp: new Date().toISOString()\n            };\n            _cache__WEBPACK_IMPORTED_MODULE_4__.cacheManager.setCachedData(_cache__WEBPACK_IMPORTED_MODULE_4__.CACHE_KEYS.trending_topics, cacheData);\n            return topics.slice(0, MAX_TOTAL_TOPICS);\n        } catch (error) {\n            console.error(\"Error fetching trending topics:\", error);\n            return [];\n        }\n    }\n    async getStats() {\n        try {\n            const weekAgo = new Date();\n            weekAgo.setDate(weekAgo.getDate() - 7);\n            // Platform distribution (last 7 days)\n            const { data: platformStats, error: platformError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"trending_topics\").select(\"platform\").gte(\"timestamp\", weekAgo.toISOString());\n            if (platformError) {\n                console.error(\"Error fetching platform stats:\", platformError);\n                return {\n                    total_topics: 0,\n                    platforms: {},\n                    categories: {},\n                    last_update: new Date().toISOString()\n                };\n            }\n            const platformStatsMap = {};\n            platformStats?.forEach((item)=>{\n                platformStatsMap[item.platform] = (platformStatsMap[item.platform] || 0) + 1;\n            });\n            // Top categories (last 7 days)\n            const { data: categoryStats, error: categoryError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"trending_topics\").select(\"category\").gte(\"timestamp\", weekAgo.toISOString());\n            if (categoryError) {\n                console.error(\"Error fetching category stats:\", categoryError);\n                return {\n                    total_topics: 0,\n                    platforms: {},\n                    categories: {},\n                    last_update: new Date().toISOString()\n                };\n            }\n            const categoryStatsMap = {};\n            categoryStats?.forEach((item)=>{\n                if (item.category) {\n                    categoryStatsMap[item.category] = (categoryStatsMap[item.category] || 0) + 1;\n                }\n            });\n            // Total topics in database (all time)\n            const { count: totalTopicsAllTime, error: totalError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"trending_topics\").select(\"*\", {\n                count: \"exact\",\n                head: true\n            });\n            if (totalError) {\n                console.error(\"Error fetching total topics:\", totalError);\n                return {\n                    total_topics: 0,\n                    platforms: {},\n                    categories: {},\n                    last_update: new Date().toISOString()\n                };\n            }\n            const totalTopics7d = Object.values(platformStatsMap).reduce((sum, count)=>sum + count, 0);\n            return {\n                total_topics: totalTopics7d,\n                platforms: platformStatsMap,\n                categories: categoryStatsMap,\n                last_update: new Date().toISOString()\n            };\n        } catch (error) {\n            console.error(\"Error fetching stats:\", error);\n            return {\n                total_topics: 0,\n                platforms: {},\n                categories: {},\n                last_update: new Date().toISOString()\n            };\n        }\n    }\n}\nconst dataFetcherService = new DataFetcherService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/dataFetcher.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/googleTrends.ts":
/*!**************************************!*\
  !*** ./lib/services/googleTrends.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleTrendsService: () => (/* binding */ GoogleTrendsService),\n/* harmony export */   googleTrendsService: () => (/* binding */ googleTrendsService)\n/* harmony export */ });\n/* harmony import */ var _utils_topicDetection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/topicDetection */ \"(rsc)/./lib/utils/topicDetection.ts\");\n\nclass GoogleTrendsService {\n    async fetchTrendingTopics(country = \"US\", limit = 100) {\n        try {\n            console.log(`🔥 Fetching Google Trends trending topics for ${country}...`);\n            // For now, we'll create demo Google Trends data since the actual API requires more complex setup\n            // In a real implementation, you would use a service like SerpAPI or similar\n            const demoTrends = [\n                \"SpaceX Starship Launch\",\n                \"AI Chatbot Technology\",\n                \"Climate Change Solutions\",\n                \"Electric Vehicle Market\",\n                \"Cryptocurrency News\",\n                \"NBA Playoffs 2024\",\n                \"Movie Releases This Week\",\n                \"Travel Destinations 2024\",\n                \"Health and Fitness Tips\",\n                \"Gaming Industry Updates\"\n            ];\n            const topics = [];\n            for(let i = 0; i < Math.min(demoTrends.length, limit); i++){\n                const searchTerm = demoTrends[i];\n                const topicCategory = (0,_utils_topicDetection__WEBPACK_IMPORTED_MODULE_0__.detectTopicCategory)(\"google-trends\", searchTerm);\n                const topic = {\n                    platform: \"Google Trends\",\n                    title: searchTerm,\n                    description: `Trending search on Google - ${searchTerm}`,\n                    url: `https://www.google.com/search?q=${encodeURIComponent(searchTerm)}`,\n                    score: 100 - i * 2,\n                    engagement: 100 - i * 2,\n                    category: \"Trending Search\",\n                    topic: topicCategory,\n                    tags: [\n                        \"google-trends\",\n                        \"trending\",\n                        \"search\"\n                    ],\n                    author: \"Google Trends\",\n                    timestamp: new Date().toISOString(),\n                    related_queries: [\n                        `${searchTerm} news`,\n                        `${searchTerm} latest`,\n                        `${searchTerm} 2024`\n                    ]\n                };\n                topics.push(topic);\n            }\n            console.log(`✅ Generated ${topics.length} Google Trends topics`);\n            return topics;\n        } catch (error) {\n            console.error(\"❌ Error fetching Google Trends topics:\", error);\n            return [];\n        }\n    }\n    // Placeholder for real Google Trends API integration\n    // You would need to use a service like SerpAPI, ScrapingBee, or similar\n    // to actually fetch Google Trends data\n    async fetchRealGoogleTrends(country, limit) {\n        // This would be implemented with a real API service\n        // For now, return empty array\n        return [];\n    }\n}\nconst googleTrendsService = new GoogleTrendsService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc2VydmljZXMvZ29vZ2xlVHJlbmRzLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2RDtBQWlCdEQsTUFBTUM7SUFDWCxNQUFNQyxvQkFBb0JDLFVBQVUsSUFBSSxFQUFFQyxRQUFRLEdBQUcsRUFBZ0M7UUFDbkYsSUFBSTtZQUNGQyxRQUFRQyxHQUFHLENBQUMsQ0FBQyw4Q0FBOEMsRUFBRUgsUUFBUSxHQUFHLENBQUM7WUFFekUsaUdBQWlHO1lBQ2pHLDRFQUE0RTtZQUU1RSxNQUFNSSxhQUFhO2dCQUNqQjtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTthQUNEO1lBRUQsTUFBTUMsU0FBOEIsRUFBRTtZQUV0QyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUMsS0FBS0MsR0FBRyxDQUFDSixXQUFXSyxNQUFNLEVBQUVSLFFBQVFLLElBQUs7Z0JBQzNELE1BQU1JLGFBQWFOLFVBQVUsQ0FBQ0UsRUFBRTtnQkFDaEMsTUFBTUssZ0JBQWdCZCwwRUFBbUJBLENBQUMsaUJBQWlCYTtnQkFFM0QsTUFBTUUsUUFBMkI7b0JBQy9CQyxVQUFVO29CQUNWQyxPQUFPSjtvQkFDUEssYUFBYSxDQUFDLDRCQUE0QixFQUFFTCxXQUFXLENBQUM7b0JBQ3hETSxLQUFLLENBQUMsZ0NBQWdDLEVBQUVDLG1CQUFtQlAsWUFBWSxDQUFDO29CQUN4RVEsT0FBTyxNQUFNWixJQUFJO29CQUNqQmEsWUFBWSxNQUFNYixJQUFJO29CQUN0QmMsVUFBVTtvQkFDVlIsT0FBT0Q7b0JBQ1BVLE1BQU07d0JBQUM7d0JBQWlCO3dCQUFZO3FCQUFTO29CQUM3Q0MsUUFBUTtvQkFDUkMsV0FBVyxJQUFJQyxPQUFPQyxXQUFXO29CQUNqQ0MsaUJBQWlCO3dCQUFDLENBQUMsRUFBRWhCLFdBQVcsS0FBSyxDQUFDO3dCQUFFLENBQUMsRUFBRUEsV0FBVyxPQUFPLENBQUM7d0JBQUUsQ0FBQyxFQUFFQSxXQUFXLEtBQUssQ0FBQztxQkFBQztnQkFDdkY7Z0JBRUFMLE9BQU9zQixJQUFJLENBQUNmO1lBQ2Q7WUFFQVYsUUFBUUMsR0FBRyxDQUFDLENBQUMsWUFBWSxFQUFFRSxPQUFPSSxNQUFNLENBQUMscUJBQXFCLENBQUM7WUFDL0QsT0FBT0o7UUFDVCxFQUFFLE9BQU91QixPQUFPO1lBQ2QxQixRQUFRMEIsS0FBSyxDQUFDLDBDQUEwQ0E7WUFDeEQsT0FBTyxFQUFFO1FBQ1g7SUFDRjtJQUVBLHFEQUFxRDtJQUNyRCx3RUFBd0U7SUFDeEUsdUNBQXVDO0lBQ3ZDLE1BQWNDLHNCQUFzQjdCLE9BQWUsRUFBRUMsS0FBYSxFQUFxQjtRQUNyRixvREFBb0Q7UUFDcEQsOEJBQThCO1FBQzlCLE9BQU8sRUFBRTtJQUNYO0FBQ0Y7QUFFTyxNQUFNNkIsc0JBQXNCLElBQUloQyxzQkFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXJhbC10cmVuZGluZy1mcm9udGVuZC8uL2xpYi9zZXJ2aWNlcy9nb29nbGVUcmVuZHMudHM/NGU1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZXRlY3RUb3BpY0NhdGVnb3J5IH0gZnJvbSAnLi4vdXRpbHMvdG9waWNEZXRlY3Rpb24nXHJcblxyXG5pbnRlcmZhY2UgR29vZ2xlVHJlbmRzVG9waWMge1xyXG4gIHBsYXRmb3JtOiBzdHJpbmdcclxuICB0aXRsZTogc3RyaW5nXHJcbiAgZGVzY3JpcHRpb246IHN0cmluZ1xyXG4gIHVybDogc3RyaW5nXHJcbiAgc2NvcmU6IG51bWJlclxyXG4gIGVuZ2FnZW1lbnQ6IG51bWJlclxyXG4gIGNhdGVnb3J5OiBzdHJpbmdcclxuICB0b3BpYzogc3RyaW5nXHJcbiAgdGFnczogc3RyaW5nW11cclxuICBhdXRob3I6IHN0cmluZ1xyXG4gIHRpbWVzdGFtcDogc3RyaW5nXHJcbiAgcmVsYXRlZF9xdWVyaWVzPzogc3RyaW5nW11cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEdvb2dsZVRyZW5kc1NlcnZpY2Uge1xyXG4gIGFzeW5jIGZldGNoVHJlbmRpbmdUb3BpY3MoY291bnRyeSA9ICdVUycsIGxpbWl0ID0gMTAwKTogUHJvbWlzZTxHb29nbGVUcmVuZHNUb3BpY1tdPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zb2xlLmxvZyhg8J+UpSBGZXRjaGluZyBHb29nbGUgVHJlbmRzIHRyZW5kaW5nIHRvcGljcyBmb3IgJHtjb3VudHJ5fS4uLmApXHJcblxyXG4gICAgICAvLyBGb3Igbm93LCB3ZSdsbCBjcmVhdGUgZGVtbyBHb29nbGUgVHJlbmRzIGRhdGEgc2luY2UgdGhlIGFjdHVhbCBBUEkgcmVxdWlyZXMgbW9yZSBjb21wbGV4IHNldHVwXHJcbiAgICAgIC8vIEluIGEgcmVhbCBpbXBsZW1lbnRhdGlvbiwgeW91IHdvdWxkIHVzZSBhIHNlcnZpY2UgbGlrZSBTZXJwQVBJIG9yIHNpbWlsYXJcclxuXHJcbiAgICAgIGNvbnN0IGRlbW9UcmVuZHMgPSBbXHJcbiAgICAgICAgJ1NwYWNlWCBTdGFyc2hpcCBMYXVuY2gnLFxyXG4gICAgICAgICdBSSBDaGF0Ym90IFRlY2hub2xvZ3knLFxyXG4gICAgICAgICdDbGltYXRlIENoYW5nZSBTb2x1dGlvbnMnLFxyXG4gICAgICAgICdFbGVjdHJpYyBWZWhpY2xlIE1hcmtldCcsXHJcbiAgICAgICAgJ0NyeXB0b2N1cnJlbmN5IE5ld3MnLFxyXG4gICAgICAgICdOQkEgUGxheW9mZnMgMjAyNCcsXHJcbiAgICAgICAgJ01vdmllIFJlbGVhc2VzIFRoaXMgV2VlaycsXHJcbiAgICAgICAgJ1RyYXZlbCBEZXN0aW5hdGlvbnMgMjAyNCcsXHJcbiAgICAgICAgJ0hlYWx0aCBhbmQgRml0bmVzcyBUaXBzJyxcclxuICAgICAgICAnR2FtaW5nIEluZHVzdHJ5IFVwZGF0ZXMnLFxyXG4gICAgICBdXHJcblxyXG4gICAgICBjb25zdCB0b3BpY3M6IEdvb2dsZVRyZW5kc1RvcGljW10gPSBbXVxyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNYXRoLm1pbihkZW1vVHJlbmRzLmxlbmd0aCwgbGltaXQpOyBpKyspIHtcclxuICAgICAgICBjb25zdCBzZWFyY2hUZXJtID0gZGVtb1RyZW5kc1tpXVxyXG4gICAgICAgIGNvbnN0IHRvcGljQ2F0ZWdvcnkgPSBkZXRlY3RUb3BpY0NhdGVnb3J5KCdnb29nbGUtdHJlbmRzJywgc2VhcmNoVGVybSlcclxuXHJcbiAgICAgICAgY29uc3QgdG9waWM6IEdvb2dsZVRyZW5kc1RvcGljID0ge1xyXG4gICAgICAgICAgcGxhdGZvcm06ICdHb29nbGUgVHJlbmRzJyxcclxuICAgICAgICAgIHRpdGxlOiBzZWFyY2hUZXJtLFxyXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBUcmVuZGluZyBzZWFyY2ggb24gR29vZ2xlIC0gJHtzZWFyY2hUZXJtfWAsXHJcbiAgICAgICAgICB1cmw6IGBodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHNlYXJjaFRlcm0pfWAsXHJcbiAgICAgICAgICBzY29yZTogMTAwIC0gaSAqIDIsXHJcbiAgICAgICAgICBlbmdhZ2VtZW50OiAxMDAgLSBpICogMixcclxuICAgICAgICAgIGNhdGVnb3J5OiAnVHJlbmRpbmcgU2VhcmNoJyxcclxuICAgICAgICAgIHRvcGljOiB0b3BpY0NhdGVnb3J5LFxyXG4gICAgICAgICAgdGFnczogWydnb29nbGUtdHJlbmRzJywgJ3RyZW5kaW5nJywgJ3NlYXJjaCddLFxyXG4gICAgICAgICAgYXV0aG9yOiAnR29vZ2xlIFRyZW5kcycsXHJcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICAgIHJlbGF0ZWRfcXVlcmllczogW2Ake3NlYXJjaFRlcm19IG5ld3NgLCBgJHtzZWFyY2hUZXJtfSBsYXRlc3RgLCBgJHtzZWFyY2hUZXJtfSAyMDI0YF0sXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0b3BpY3MucHVzaCh0b3BpYylcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc29sZS5sb2coYOKchSBHZW5lcmF0ZWQgJHt0b3BpY3MubGVuZ3RofSBHb29nbGUgVHJlbmRzIHRvcGljc2ApXHJcbiAgICAgIHJldHVybiB0b3BpY3NcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBmZXRjaGluZyBHb29nbGUgVHJlbmRzIHRvcGljczonLCBlcnJvcilcclxuICAgICAgcmV0dXJuIFtdXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBQbGFjZWhvbGRlciBmb3IgcmVhbCBHb29nbGUgVHJlbmRzIEFQSSBpbnRlZ3JhdGlvblxyXG4gIC8vIFlvdSB3b3VsZCBuZWVkIHRvIHVzZSBhIHNlcnZpY2UgbGlrZSBTZXJwQVBJLCBTY3JhcGluZ0JlZSwgb3Igc2ltaWxhclxyXG4gIC8vIHRvIGFjdHVhbGx5IGZldGNoIEdvb2dsZSBUcmVuZHMgZGF0YVxyXG4gIHByaXZhdGUgYXN5bmMgZmV0Y2hSZWFsR29vZ2xlVHJlbmRzKGNvdW50cnk6IHN0cmluZywgbGltaXQ6IG51bWJlcik6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgIC8vIFRoaXMgd291bGQgYmUgaW1wbGVtZW50ZWQgd2l0aCBhIHJlYWwgQVBJIHNlcnZpY2VcclxuICAgIC8vIEZvciBub3csIHJldHVybiBlbXB0eSBhcnJheVxyXG4gICAgcmV0dXJuIFtdXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ29vZ2xlVHJlbmRzU2VydmljZSA9IG5ldyBHb29nbGVUcmVuZHNTZXJ2aWNlKClcclxuIl0sIm5hbWVzIjpbImRldGVjdFRvcGljQ2F0ZWdvcnkiLCJHb29nbGVUcmVuZHNTZXJ2aWNlIiwiZmV0Y2hUcmVuZGluZ1RvcGljcyIsImNvdW50cnkiLCJsaW1pdCIsImNvbnNvbGUiLCJsb2ciLCJkZW1vVHJlbmRzIiwidG9waWNzIiwiaSIsIk1hdGgiLCJtaW4iLCJsZW5ndGgiLCJzZWFyY2hUZXJtIiwidG9waWNDYXRlZ29yeSIsInRvcGljIiwicGxhdGZvcm0iLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwidXJsIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2NvcmUiLCJlbmdhZ2VtZW50IiwiY2F0ZWdvcnkiLCJ0YWdzIiwiYXV0aG9yIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwicmVsYXRlZF9xdWVyaWVzIiwicHVzaCIsImVycm9yIiwiZmV0Y2hSZWFsR29vZ2xlVHJlbmRzIiwiZ29vZ2xlVHJlbmRzU2VydmljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/googleTrends.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/reddit.ts":
/*!********************************!*\
  !*** ./lib/services/reddit.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedditService: () => (/* binding */ RedditService),\n/* harmony export */   redditService: () => (/* binding */ redditService)\n/* harmony export */ });\n/* harmony import */ var _utils_topicDetection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/topicDetection */ \"(rsc)/./lib/utils/topicDetection.ts\");\n\nclass RedditService {\n    constructor(){\n        this.clientId = process.env.REDDIT_CLIENT_ID || \"\";\n        this.clientSecret = process.env.REDDIT_CLIENT_SECRET || \"\";\n        this.userAgent = process.env.REDDIT_USER_AGENT || \"viral_trending_bot/1.0\";\n    }\n    async getAccessToken() {\n        try {\n            const response = await fetch(\"https://www.reddit.com/api/v1/access_token\", {\n                method: \"POST\",\n                headers: {\n                    Authorization: `Basic ${Buffer.from(`${this.clientId}:${this.clientSecret}`).toString(\"base64\")}`,\n                    \"Content-Type\": \"application/x-www-form-urlencoded\",\n                    \"User-Agent\": this.userAgent\n                },\n                body: \"grant_type=client_credentials\"\n            });\n            if (!response.ok) {\n                console.error(\"Failed to get Reddit access token\");\n                return null;\n            }\n            const data = await response.json();\n            return data.access_token;\n        } catch (error) {\n            console.error(\"Error getting Reddit access token:\", error);\n            return null;\n        }\n    }\n    async fetchTrendingTopics() {\n        const accessToken = await this.getAccessToken();\n        if (!accessToken) {\n            console.log(\"❌ Reddit API not available - no access token\");\n            return [];\n        }\n        const trendingTopics = [];\n        const seenTitles = new Set();\n        try {\n            console.log(\"\\uD83D\\uDD34 Fetching from Reddit API...\");\n            const subreddits = [\n                \"trending\",\n                \"popular\",\n                \"all\",\n                \"technology\",\n                \"science\",\n                \"sports\",\n                \"gaming\",\n                \"movies\",\n                \"music\",\n                \"books\",\n                \"food\",\n                \"cryptocurrency\",\n                \"wallstreetbets\",\n                \"investing\",\n                \"personalfinance\"\n            ];\n            for (const subreddit of subreddits){\n                try {\n                    const response = await fetch(`https://oauth.reddit.com/r/${subreddit}/hot.json?limit=20`, {\n                        headers: {\n                            Authorization: `Bearer ${accessToken}`,\n                            \"User-Agent\": this.userAgent\n                        }\n                    });\n                    if (!response.ok) {\n                        console.error(`Error fetching from r/${subreddit}:`, response.status);\n                        continue;\n                    }\n                    const data = await response.json();\n                    const posts = data.data.children.map((child)=>child.data);\n                    for (const post of posts){\n                        if (post.title && !seenTitles.has(post.title)) {\n                            const topicCategory = (0,_utils_topicDetection__WEBPACK_IMPORTED_MODULE_0__.detectTopicCategory)(subreddit, post.title);\n                            const topic = {\n                                platform: \"Reddit\",\n                                title: post.title,\n                                description: post.selftext?.substring(0, 200) || `Reddit post from r/${subreddit}`,\n                                url: `https://reddit.com${post.permalink}`,\n                                score: post.score,\n                                engagement: post.score + post.num_comments * 2,\n                                category: `r/${subreddit}`,\n                                topic: topicCategory,\n                                tags: [\n                                    \"reddit\",\n                                    subreddit,\n                                    topicCategory\n                                ],\n                                author: post.author || \"Anonymous\",\n                                timestamp: new Date(post.created_utc * 1000).toISOString()\n                            };\n                            trendingTopics.push(topic);\n                            seenTitles.add(post.title);\n                            if (trendingTopics.length >= 200) break;\n                        }\n                    }\n                    if (trendingTopics.length >= 200) break;\n                } catch (error) {\n                    console.error(`Error fetching from r/${subreddit}:`, error);\n                    continue;\n                }\n            }\n            console.log(`✅ Fetched ${trendingTopics.length} unique Reddit posts from API`);\n            return trendingTopics;\n        } catch (error) {\n            console.error(\"❌ Reddit API failed:\", error);\n            return [];\n        }\n    }\n}\nconst redditService = new RedditService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/reddit.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/youtube.ts":
/*!*********************************!*\
  !*** ./lib/services/youtube.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   YouTubeService: () => (/* binding */ YouTubeService),\n/* harmony export */   youtubeService: () => (/* binding */ youtubeService)\n/* harmony export */ });\n/* harmony import */ var _utils_topicDetection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/topicDetection */ \"(rsc)/./lib/utils/topicDetection.ts\");\n\nclass YouTubeService {\n    constructor(){\n        this.MAX_DESCRIPTION_LENGTH = 200;\n        this.ENGAGEMENT_SCORE_DIVISOR = 1000;\n        this.apiKey = process.env.YOUTUBE_API_KEY || \"\";\n    }\n    async fetchTrendingTopics() {\n        if (!this.apiKey) {\n            console.log(\"YouTube API key not found\");\n            return [];\n        }\n        const trendingTopics = [];\n        const seenTitles = new Set();\n        try {\n            console.log(\"\\uD83D\\uDCFA Fetching from YouTube API...\");\n            const regions = [\n                \"US\",\n                \"GB\",\n                \"CA\",\n                \"AU\"\n            ];\n            for (const region of regions){\n                try {\n                    const url = `https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics&chart=mostPopular&regionCode=${region}&maxResults=50&videoCategoryId=0&key=${this.apiKey}`;\n                    const response = await fetch(url);\n                    if (!response.ok) {\n                        console.error(`Error fetching YouTube data for region ${region}:`, response.status);\n                        continue;\n                    }\n                    const data = await response.json();\n                    for (const video of data.items || []){\n                        if (video.snippet.title && !seenTitles.has(video.snippet.title)) {\n                            const snippet = video.snippet;\n                            const statistics = video.statistics || {};\n                            // Calculate engagement score\n                            const viewCount = parseInt(statistics.viewCount || \"0\");\n                            const likeCount = parseInt(statistics.likeCount || \"0\");\n                            const commentCount = parseInt(statistics.commentCount || \"0\");\n                            const engagement = viewCount + likeCount * 10 + commentCount * 50;\n                            // Detect topic based on title and description\n                            const videoText = `${snippet.title} ${snippet.description || \"\"}`;\n                            const topicCategory = (0,_utils_topicDetection__WEBPACK_IMPORTED_MODULE_0__.detectTopicCategory)(\"youtube\", videoText);\n                            const videoTags = [\n                                \"youtube\",\n                                \"video\",\n                                \"trending\",\n                                region.toLowerCase()\n                            ];\n                            const topic = {\n                                platform: \"YouTube\",\n                                title: snippet.title,\n                                description: snippet.description?.substring(0, this.MAX_DESCRIPTION_LENGTH) || \"Trending video on YouTube\",\n                                url: `https://www.youtube.com/watch?v=${video.id}`,\n                                score: Math.floor(engagement / this.ENGAGEMENT_SCORE_DIVISOR),\n                                engagement,\n                                category: snippet.categoryId || \"Video\",\n                                topic: topicCategory,\n                                tags: videoTags,\n                                author: snippet.channelTitle || \"Unknown Channel\",\n                                timestamp: snippet.publishedAt\n                            };\n                            trendingTopics.push(topic);\n                            seenTitles.add(snippet.title);\n                            if (trendingTopics.length >= 200) break;\n                        }\n                    }\n                    if (trendingTopics.length >= 200) break;\n                } catch (error) {\n                    console.error(`Error fetching from YouTube region ${region}:`, error);\n                    continue;\n                }\n            }\n            console.log(`✅ Fetched ${trendingTopics.length} unique YouTube videos from API`);\n            // If no videos found, create demo data\n            if (trendingTopics.length === 0) {\n                console.log(\"No YouTube videos found - creating demo data\");\n                const demoVideos = [\n                    \"Amazing Street Food Tour in Tokyo\",\n                    \"How to Build a Sustainable Home\",\n                    \"Mind-blowing Magic Tricks Revealed\",\n                    \"SpaceX Launch Live Stream\",\n                    \"Best Travel Destinations 2024\"\n                ];\n                for(let i = 0; i < demoVideos.length; i++){\n                    const title = demoVideos[i];\n                    const detectedTopic = (0,_utils_topicDetection__WEBPACK_IMPORTED_MODULE_0__.detectTopicCategory)(\"youtube\", title);\n                    const topic = {\n                        platform: \"YouTube\",\n                        title,\n                        description: \"Trending video on YouTube\",\n                        url: \"https://youtube.com/watch?v=demo\",\n                        score: 100 - i * 10,\n                        engagement: 100 - i * 10,\n                        category: \"Video\",\n                        tags: [\n                            \"youtube\",\n                            \"video\",\n                            \"trending\"\n                        ],\n                        topic: detectedTopic,\n                        author: \"Unknown Channel\",\n                        timestamp: new Date().toISOString()\n                    };\n                    trendingTopics.push(topic);\n                }\n            }\n            return trendingTopics;\n        } catch (error) {\n            console.error(\"❌ YouTube API failed:\", error);\n            return [];\n        }\n    }\n}\nconst youtubeService = new YouTubeService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/youtube.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://ewlwqxfzctmwczluhulz.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV3bHdxeGZ6Y3Rtd2N6bHVodWx6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMyMTI0MjgsImV4cCI6MjA2ODc4ODQyOH0.6UVM0RzY4E4rR3KiQ44rbOBDUjUoY0bRkkphsg7-58s\";\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3VwYWJhc2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0Q7QUFFcEQsTUFBTUMsY0FBY0MsMENBQW9DO0FBQ3hELE1BQU1HLGtCQUFrQkgsa05BQXlDO0FBRTFELE1BQU1LLFdBQVdQLG1FQUFZQSxDQUFDQyxhQUFhSSxpQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXJhbC10cmVuZGluZy1mcm9udGVuZC8uL2xpYi9zdXBhYmFzZS50cz9jOTlmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcydcclxuXHJcbmNvbnN0IHN1cGFiYXNlVXJsID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIVxyXG5jb25zdCBzdXBhYmFzZUFub25LZXkgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSFcclxuXHJcbmV4cG9ydCBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VBbm9uS2V5KVxyXG5cclxuLy8gRGF0YWJhc2UgdHlwZXNcclxuZXhwb3J0IGludGVyZmFjZSBUcmVuZGluZ1RvcGljIHtcclxuICBpZD86IG51bWJlclxyXG4gIHBsYXRmb3JtOiBzdHJpbmdcclxuICB0aXRsZTogc3RyaW5nXHJcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmdcclxuICB1cmw/OiBzdHJpbmdcclxuICBzY29yZT86IG51bWJlclxyXG4gIGVuZ2FnZW1lbnQ/OiBudW1iZXJcclxuICB0aW1lc3RhbXA/OiBzdHJpbmdcclxuICBjYXRlZ29yeT86IHN0cmluZ1xyXG4gIHRhZ3M/OiBzdHJpbmdbXVxyXG4gIHRvcGljPzogc3RyaW5nXHJcbiAgYXV0aG9yPzogc3RyaW5nXHJcbiAgY3JlYXRlZF9hdD86IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERhdGFiYXNlU3RhdHMge1xyXG4gIHRvdGFsX3RvcGljczogbnVtYmVyXHJcbiAgcGxhdGZvcm1zOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+XHJcbiAgY2F0ZWdvcmllczogUmVjb3JkPHN0cmluZywgbnVtYmVyPlxyXG4gIGxhc3RfdXBkYXRlOiBzdHJpbmdcclxufVxyXG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50Iiwic3VwYWJhc2VVcmwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwic3VwYWJhc2VBbm9uS2V5IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkiLCJzdXBhYmFzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase.ts\n");

/***/ }),

/***/ "(rsc)/./lib/utils/topicDetection.ts":
/*!*************************************!*\
  !*** ./lib/utils/topicDetection.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detectTopicCategory: () => (/* binding */ detectTopicCategory)\n/* harmony export */ });\nfunction detectTopicCategory(platform, title) {\n    const platformLower = platform.toLowerCase();\n    const titleLower = title.toLowerCase();\n    // Crypto topics\n    const cryptoKeywords = [\n        \"crypto\",\n        \"bitcoin\",\n        \"ethereum\",\n        \"blockchain\",\n        \"defi\",\n        \"nft\",\n        \"token\",\n        \"coin\"\n    ];\n    if (cryptoKeywords.some((keyword)=>platformLower.includes(keyword) || titleLower.includes(keyword))) {\n        return \"crypto\";\n    }\n    // Sports topics\n    const sportsKeywords = [\n        \"sports\",\n        \"nba\",\n        \"nfl\",\n        \"soccer\",\n        \"tennis\",\n        \"formula1\",\n        \"football\",\n        \"basketball\",\n        \"baseball\"\n    ];\n    if (sportsKeywords.some((keyword)=>platformLower.includes(keyword) || titleLower.includes(keyword))) {\n        return \"sports\";\n    }\n    // Finance topics\n    const financeKeywords = [\n        \"finance\",\n        \"investing\",\n        \"stocks\",\n        \"wallstreet\",\n        \"economy\",\n        \"market\",\n        \"trading\"\n    ];\n    if (financeKeywords.some((keyword)=>platformLower.includes(keyword) || titleLower.includes(keyword))) {\n        return \"finance\";\n    }\n    // Culture topics\n    const cultureKeywords = [\n        \"movies\",\n        \"music\",\n        \"art\",\n        \"books\",\n        \"television\",\n        \"fashion\",\n        \"culture\",\n        \"photography\"\n    ];\n    if (cultureKeywords.some((keyword)=>platformLower.includes(keyword) || titleLower.includes(keyword))) {\n        return \"culture\";\n    }\n    // Memes & Humor topics\n    const memeKeywords = [\n        \"memes\",\n        \"funny\",\n        \"humor\",\n        \"jokes\",\n        \"dank\",\n        \"viral\"\n    ];\n    if (memeKeywords.some((keyword)=>platformLower.includes(keyword) || titleLower.includes(keyword))) {\n        return \"memes\";\n    }\n    // Gaming topics\n    const gamingKeywords = [\n        \"gaming\",\n        \"game\",\n        \"esports\",\n        \"pcgaming\",\n        \"xbox\",\n        \"playstation\",\n        \"nintendo\"\n    ];\n    if (gamingKeywords.some((keyword)=>platformLower.includes(keyword) || titleLower.includes(keyword))) {\n        return \"gaming\";\n    }\n    // Technology topics\n    const techKeywords = [\n        \"technology\",\n        \"tech\",\n        \"science\",\n        \"innovation\",\n        \"ai\",\n        \"machine learning\"\n    ];\n    if (techKeywords.some((keyword)=>platformLower.includes(keyword) || titleLower.includes(keyword))) {\n        return \"technology\";\n    }\n    // Politics topics\n    const politicsKeywords = [\n        \"politics\",\n        \"worldnews\",\n        \"government\",\n        \"election\"\n    ];\n    if (politicsKeywords.some((keyword)=>platformLower.includes(keyword) || titleLower.includes(keyword))) {\n        return \"politics\";\n    }\n    // Lifestyle topics\n    const lifestyleKeywords = [\n        \"food\",\n        \"cooking\",\n        \"travel\",\n        \"health\",\n        \"fitness\",\n        \"lifestyle\"\n    ];\n    if (lifestyleKeywords.some((keyword)=>platformLower.includes(keyword) || titleLower.includes(keyword))) {\n        return \"lifestyle\";\n    }\n    return \"general\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvdXRpbHMvdG9waWNEZXRlY3Rpb24udHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLG9CQUFvQkMsUUFBZ0IsRUFBRUMsS0FBYTtJQUNqRSxNQUFNQyxnQkFBZ0JGLFNBQVNHLFdBQVc7SUFDMUMsTUFBTUMsYUFBYUgsTUFBTUUsV0FBVztJQUVwQyxnQkFBZ0I7SUFDaEIsTUFBTUUsaUJBQWlCO1FBQUM7UUFBVTtRQUFXO1FBQVk7UUFBYztRQUFRO1FBQU87UUFBUztLQUFPO0lBQ3RHLElBQUlBLGVBQWVDLElBQUksQ0FBQyxDQUFDQyxVQUFZTCxjQUFjTSxRQUFRLENBQUNELFlBQVlILFdBQVdJLFFBQVEsQ0FBQ0QsV0FBVztRQUNyRyxPQUFPO0lBQ1Q7SUFFQSxnQkFBZ0I7SUFDaEIsTUFBTUUsaUJBQWlCO1FBQUM7UUFBVTtRQUFPO1FBQU87UUFBVTtRQUFVO1FBQVk7UUFBWTtRQUFjO0tBQVc7SUFDckgsSUFBSUEsZUFBZUgsSUFBSSxDQUFDLENBQUNDLFVBQVlMLGNBQWNNLFFBQVEsQ0FBQ0QsWUFBWUgsV0FBV0ksUUFBUSxDQUFDRCxXQUFXO1FBQ3JHLE9BQU87SUFDVDtJQUVBLGlCQUFpQjtJQUNqQixNQUFNRyxrQkFBa0I7UUFBQztRQUFXO1FBQWE7UUFBVTtRQUFjO1FBQVc7UUFBVTtLQUFVO0lBQ3hHLElBQUlBLGdCQUFnQkosSUFBSSxDQUFDLENBQUNDLFVBQVlMLGNBQWNNLFFBQVEsQ0FBQ0QsWUFBWUgsV0FBV0ksUUFBUSxDQUFDRCxXQUFXO1FBQ3RHLE9BQU87SUFDVDtJQUVBLGlCQUFpQjtJQUNqQixNQUFNSSxrQkFBa0I7UUFBQztRQUFVO1FBQVM7UUFBTztRQUFTO1FBQWM7UUFBVztRQUFXO0tBQWM7SUFDOUcsSUFBSUEsZ0JBQWdCTCxJQUFJLENBQUMsQ0FBQ0MsVUFBWUwsY0FBY00sUUFBUSxDQUFDRCxZQUFZSCxXQUFXSSxRQUFRLENBQUNELFdBQVc7UUFDdEcsT0FBTztJQUNUO0lBRUEsdUJBQXVCO0lBQ3ZCLE1BQU1LLGVBQWU7UUFBQztRQUFTO1FBQVM7UUFBUztRQUFTO1FBQVE7S0FBUTtJQUMxRSxJQUFJQSxhQUFhTixJQUFJLENBQUMsQ0FBQ0MsVUFBWUwsY0FBY00sUUFBUSxDQUFDRCxZQUFZSCxXQUFXSSxRQUFRLENBQUNELFdBQVc7UUFDbkcsT0FBTztJQUNUO0lBRUEsZ0JBQWdCO0lBQ2hCLE1BQU1NLGlCQUFpQjtRQUFDO1FBQVU7UUFBUTtRQUFXO1FBQVk7UUFBUTtRQUFlO0tBQVc7SUFDbkcsSUFBSUEsZUFBZVAsSUFBSSxDQUFDLENBQUNDLFVBQVlMLGNBQWNNLFFBQVEsQ0FBQ0QsWUFBWUgsV0FBV0ksUUFBUSxDQUFDRCxXQUFXO1FBQ3JHLE9BQU87SUFDVDtJQUVBLG9CQUFvQjtJQUNwQixNQUFNTyxlQUFlO1FBQUM7UUFBYztRQUFRO1FBQVc7UUFBYztRQUFNO0tBQW1CO0lBQzlGLElBQUlBLGFBQWFSLElBQUksQ0FBQyxDQUFDQyxVQUFZTCxjQUFjTSxRQUFRLENBQUNELFlBQVlILFdBQVdJLFFBQVEsQ0FBQ0QsV0FBVztRQUNuRyxPQUFPO0lBQ1Q7SUFFQSxrQkFBa0I7SUFDbEIsTUFBTVEsbUJBQW1CO1FBQUM7UUFBWTtRQUFhO1FBQWM7S0FBVztJQUM1RSxJQUFJQSxpQkFBaUJULElBQUksQ0FBQyxDQUFDQyxVQUFZTCxjQUFjTSxRQUFRLENBQUNELFlBQVlILFdBQVdJLFFBQVEsQ0FBQ0QsV0FBVztRQUN2RyxPQUFPO0lBQ1Q7SUFFQSxtQkFBbUI7SUFDbkIsTUFBTVMsb0JBQW9CO1FBQUM7UUFBUTtRQUFXO1FBQVU7UUFBVTtRQUFXO0tBQVk7SUFDekYsSUFBSUEsa0JBQWtCVixJQUFJLENBQUMsQ0FBQ0MsVUFBWUwsY0FBY00sUUFBUSxDQUFDRCxZQUFZSCxXQUFXSSxRQUFRLENBQUNELFdBQVc7UUFDeEcsT0FBTztJQUNUO0lBRUEsT0FBTztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmlyYWwtdHJlbmRpbmctZnJvbnRlbmQvLi9saWIvdXRpbHMvdG9waWNEZXRlY3Rpb24udHM/ODQ0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZGV0ZWN0VG9waWNDYXRlZ29yeShwbGF0Zm9ybTogc3RyaW5nLCB0aXRsZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICBjb25zdCBwbGF0Zm9ybUxvd2VyID0gcGxhdGZvcm0udG9Mb3dlckNhc2UoKVxyXG4gIGNvbnN0IHRpdGxlTG93ZXIgPSB0aXRsZS50b0xvd2VyQ2FzZSgpXHJcblxyXG4gIC8vIENyeXB0byB0b3BpY3NcclxuICBjb25zdCBjcnlwdG9LZXl3b3JkcyA9IFsnY3J5cHRvJywgJ2JpdGNvaW4nLCAnZXRoZXJldW0nLCAnYmxvY2tjaGFpbicsICdkZWZpJywgJ25mdCcsICd0b2tlbicsICdjb2luJ11cclxuICBpZiAoY3J5cHRvS2V5d29yZHMuc29tZSgoa2V5d29yZCkgPT4gcGxhdGZvcm1Mb3dlci5pbmNsdWRlcyhrZXl3b3JkKSB8fCB0aXRsZUxvd2VyLmluY2x1ZGVzKGtleXdvcmQpKSkge1xyXG4gICAgcmV0dXJuICdjcnlwdG8nXHJcbiAgfVxyXG5cclxuICAvLyBTcG9ydHMgdG9waWNzXHJcbiAgY29uc3Qgc3BvcnRzS2V5d29yZHMgPSBbJ3Nwb3J0cycsICduYmEnLCAnbmZsJywgJ3NvY2NlcicsICd0ZW5uaXMnLCAnZm9ybXVsYTEnLCAnZm9vdGJhbGwnLCAnYmFza2V0YmFsbCcsICdiYXNlYmFsbCddXHJcbiAgaWYgKHNwb3J0c0tleXdvcmRzLnNvbWUoKGtleXdvcmQpID0+IHBsYXRmb3JtTG93ZXIuaW5jbHVkZXMoa2V5d29yZCkgfHwgdGl0bGVMb3dlci5pbmNsdWRlcyhrZXl3b3JkKSkpIHtcclxuICAgIHJldHVybiAnc3BvcnRzJ1xyXG4gIH1cclxuXHJcbiAgLy8gRmluYW5jZSB0b3BpY3NcclxuICBjb25zdCBmaW5hbmNlS2V5d29yZHMgPSBbJ2ZpbmFuY2UnLCAnaW52ZXN0aW5nJywgJ3N0b2NrcycsICd3YWxsc3RyZWV0JywgJ2Vjb25vbXknLCAnbWFya2V0JywgJ3RyYWRpbmcnXVxyXG4gIGlmIChmaW5hbmNlS2V5d29yZHMuc29tZSgoa2V5d29yZCkgPT4gcGxhdGZvcm1Mb3dlci5pbmNsdWRlcyhrZXl3b3JkKSB8fCB0aXRsZUxvd2VyLmluY2x1ZGVzKGtleXdvcmQpKSkge1xyXG4gICAgcmV0dXJuICdmaW5hbmNlJ1xyXG4gIH1cclxuXHJcbiAgLy8gQ3VsdHVyZSB0b3BpY3NcclxuICBjb25zdCBjdWx0dXJlS2V5d29yZHMgPSBbJ21vdmllcycsICdtdXNpYycsICdhcnQnLCAnYm9va3MnLCAndGVsZXZpc2lvbicsICdmYXNoaW9uJywgJ2N1bHR1cmUnLCAncGhvdG9ncmFwaHknXVxyXG4gIGlmIChjdWx0dXJlS2V5d29yZHMuc29tZSgoa2V5d29yZCkgPT4gcGxhdGZvcm1Mb3dlci5pbmNsdWRlcyhrZXl3b3JkKSB8fCB0aXRsZUxvd2VyLmluY2x1ZGVzKGtleXdvcmQpKSkge1xyXG4gICAgcmV0dXJuICdjdWx0dXJlJ1xyXG4gIH1cclxuXHJcbiAgLy8gTWVtZXMgJiBIdW1vciB0b3BpY3NcclxuICBjb25zdCBtZW1lS2V5d29yZHMgPSBbJ21lbWVzJywgJ2Z1bm55JywgJ2h1bW9yJywgJ2pva2VzJywgJ2RhbmsnLCAndmlyYWwnXVxyXG4gIGlmIChtZW1lS2V5d29yZHMuc29tZSgoa2V5d29yZCkgPT4gcGxhdGZvcm1Mb3dlci5pbmNsdWRlcyhrZXl3b3JkKSB8fCB0aXRsZUxvd2VyLmluY2x1ZGVzKGtleXdvcmQpKSkge1xyXG4gICAgcmV0dXJuICdtZW1lcydcclxuICB9XHJcblxyXG4gIC8vIEdhbWluZyB0b3BpY3NcclxuICBjb25zdCBnYW1pbmdLZXl3b3JkcyA9IFsnZ2FtaW5nJywgJ2dhbWUnLCAnZXNwb3J0cycsICdwY2dhbWluZycsICd4Ym94JywgJ3BsYXlzdGF0aW9uJywgJ25pbnRlbmRvJ11cclxuICBpZiAoZ2FtaW5nS2V5d29yZHMuc29tZSgoa2V5d29yZCkgPT4gcGxhdGZvcm1Mb3dlci5pbmNsdWRlcyhrZXl3b3JkKSB8fCB0aXRsZUxvd2VyLmluY2x1ZGVzKGtleXdvcmQpKSkge1xyXG4gICAgcmV0dXJuICdnYW1pbmcnXHJcbiAgfVxyXG5cclxuICAvLyBUZWNobm9sb2d5IHRvcGljc1xyXG4gIGNvbnN0IHRlY2hLZXl3b3JkcyA9IFsndGVjaG5vbG9neScsICd0ZWNoJywgJ3NjaWVuY2UnLCAnaW5ub3ZhdGlvbicsICdhaScsICdtYWNoaW5lIGxlYXJuaW5nJ11cclxuICBpZiAodGVjaEtleXdvcmRzLnNvbWUoKGtleXdvcmQpID0+IHBsYXRmb3JtTG93ZXIuaW5jbHVkZXMoa2V5d29yZCkgfHwgdGl0bGVMb3dlci5pbmNsdWRlcyhrZXl3b3JkKSkpIHtcclxuICAgIHJldHVybiAndGVjaG5vbG9neSdcclxuICB9XHJcblxyXG4gIC8vIFBvbGl0aWNzIHRvcGljc1xyXG4gIGNvbnN0IHBvbGl0aWNzS2V5d29yZHMgPSBbJ3BvbGl0aWNzJywgJ3dvcmxkbmV3cycsICdnb3Zlcm5tZW50JywgJ2VsZWN0aW9uJ11cclxuICBpZiAocG9saXRpY3NLZXl3b3Jkcy5zb21lKChrZXl3b3JkKSA9PiBwbGF0Zm9ybUxvd2VyLmluY2x1ZGVzKGtleXdvcmQpIHx8IHRpdGxlTG93ZXIuaW5jbHVkZXMoa2V5d29yZCkpKSB7XHJcbiAgICByZXR1cm4gJ3BvbGl0aWNzJ1xyXG4gIH1cclxuXHJcbiAgLy8gTGlmZXN0eWxlIHRvcGljc1xyXG4gIGNvbnN0IGxpZmVzdHlsZUtleXdvcmRzID0gWydmb29kJywgJ2Nvb2tpbmcnLCAndHJhdmVsJywgJ2hlYWx0aCcsICdmaXRuZXNzJywgJ2xpZmVzdHlsZSddXHJcbiAgaWYgKGxpZmVzdHlsZUtleXdvcmRzLnNvbWUoKGtleXdvcmQpID0+IHBsYXRmb3JtTG93ZXIuaW5jbHVkZXMoa2V5d29yZCkgfHwgdGl0bGVMb3dlci5pbmNsdWRlcyhrZXl3b3JkKSkpIHtcclxuICAgIHJldHVybiAnbGlmZXN0eWxlJ1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuICdnZW5lcmFsJ1xyXG59XHJcbiJdLCJuYW1lcyI6WyJkZXRlY3RUb3BpY0NhdGVnb3J5IiwicGxhdGZvcm0iLCJ0aXRsZSIsInBsYXRmb3JtTG93ZXIiLCJ0b0xvd2VyQ2FzZSIsInRpdGxlTG93ZXIiLCJjcnlwdG9LZXl3b3JkcyIsInNvbWUiLCJrZXl3b3JkIiwiaW5jbHVkZXMiLCJzcG9ydHNLZXl3b3JkcyIsImZpbmFuY2VLZXl3b3JkcyIsImN1bHR1cmVLZXl3b3JkcyIsIm1lbWVLZXl3b3JkcyIsImdhbWluZ0tleXdvcmRzIiwidGVjaEtleXdvcmRzIiwicG9saXRpY3NLZXl3b3JkcyIsImxpZmVzdHlsZUtleXdvcmRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/utils/topicDetection.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@supabase","vendor-chunks/next","vendor-chunks/ws","vendor-chunks/whatwg-url","vendor-chunks/isows","vendor-chunks/tr46","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcron%2Fupdate-database%2Froute&page=%2Fapi%2Fcron%2Fupdate-database%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcron%2Fupdate-database%2Froute.ts&appDir=C%3A%5CUsers%5CWhite_Prince%5CDesktop%5Cviral%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CWhite_Prince%5CDesktop%5Cviral&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();